# -*- coding: utf-8 -*-
"""Music Data Visualization.ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd
import numpy as np
import seaborn as sns

tracks = pd.read_csv('drive/My Drive/DataSets/fma/tracks.csv',index_col=0, header=[0, 1])

tracks.head()

tracks.shape

tracks.isnull().sum()

"""Albums data:"""

tracks['album']['type'].unique()

tracks['album']['tags'].unique()

tracks['album'].head().T

tracks_albums=pd.concat([tracks['album']['date_released'],tracks['album']['id'],tracks['album']['listens'],tracks['album']['title'],tracks['album']['type']],axis=1)

tracks_albums.head()

"""Word Cloud of 'title' column: Frequency = Number of tracks in each album"""

from io import StringIO
si=StringIO()
tracks_albums['title'].apply(lambda x: si.write(str(x)+" "))
s=si.getvalue()
si.close()

from wordcloud import WordCloud
import matplotlib.pyplot as plt
text = s
wordcloud = WordCloud(background_color="black",max_words=len(s),random_state=0,max_font_size=75).generate(text)
plt.figure(figsize=(7,7))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

tracks_albums.drop_duplicates(subset='id',keep='first',inplace=True)

tracks_albums.head()

tracks_albums.shape

data=tracks_albums['date_released'].astype(str)
tracks_albums['date_released']=data.apply(lambda x: x.split()[0])

tracks_albums.head(2)

tracks_albums['year']=pd.DatetimeIndex(tracks_albums['date_released']).year.fillna(0.0).astype(int)

tracks_albums.head(2)

tracks_albums['month_year'] = pd.to_datetime(tracks_albums['date_released']).dt.to_period('M')
tracks_albums.head(2)

albums_years=tracks_albums[tracks_albums['year']!=0]

albums_years.shape

sns.relplot('year','listens',data=albums_years,kind='line')

sns.relplot('year','listens',data=albums_years,kind='line',hue='type')

sns.relplot('year','listens',data=albums_years,kind='line',col='type')

sns.catplot('type','listens',data=tracks_albums)

sns.catplot('type','listens',data=tracks_albums,jitter=False)

sns.catplot('listens','type',data=tracks_albums,kind='bar')

sns.catplot('listens','type',data=tracks_albums,kind='point')

tracks['track'].head().T

tracks['track'].isnull().sum()

"""Genres data:"""

genres = pd.read_csv("drive/My Drive/DataSets/fma/genres.csv")

genres.head()

genresDict={}
for ind in genres.index:
  key = genres['genre_id'][ind]
  value = genres['title'][ind]
  genresDict[key]=value

print(genresDict)

genre_id=pd.Series(tracks['track']['genres'].apply(lambda row : str(row[1:][:-1].split(',')[0])))

"""Combining tracks and genres data:"""

tracks = pd.concat([tracks['track']['title'],tracks['track']['duration'],tracks['track']['favorites'],tracks['track']['genres'],tracks['track']['genres_all'],tracks['track']['interest'],tracks['track']['listens']],axis=1)

tracks.head()

tracks['genre_id']=genre_id
tracks.head()

tracks=tracks[tracks.genre_id != '']

tracks['genre_id'] = tracks['genre_id'].apply(lambda id : int(id))

tracks['genre_title']=tracks['genre_id'].apply(lambda id : genresDict[id])
tracks.head()

from io import StringIO
si=StringIO()
tracks['genre_title'].apply(lambda x: si.write(str(x)+" "))
s=si.getvalue()
si.close()

s[0:500]

"""Word Cloud of genres column:"""

from wordcloud import WordCloud
import matplotlib.pyplot as plt
text = s
wordcloud = WordCloud(background_color="black",max_words=len(s),random_state=0,max_font_size=256).generate(text)
plt.figure(figsize=[10,10])
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

"""Word Cloud with mask:"""

from PIL import Image
import numpy as np
from wordcloud import ImageColorGenerator

mask = np.array(Image.open('drive/My Drive/DataVisProject/guitar.jpg'))
wordcloud = WordCloud(background_color="white",random_state=0, max_words=len(s), max_font_size=250, mask=mask, width=mask.shape[1],
                      height=mask.shape[0]).generate(text)
plt.figure(figsize=(10,10))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

mask_colors = ImageColorGenerator(mask)
mask = np.array(Image.open('drive/My Drive/DataVisProject/guitar.jpg'))
wordcloud = WordCloud(background_color="white",random_state=0, max_words=len(s), max_font_size=250, mask=mask, width=mask.shape[1],
                      height=mask.shape[0], color_func=mask_colors).generate(text)
plt.figure(figsize=(10,10))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

print(tracks.genre_title.value_counts())

tracks['genre_title'].value_counts().head(30).plot(kind='barh', figsize=(20,10))

tracks_top = tracks[tracks.genre_title.isin(['Electronic', 'Avant-Garde', 'Experimental', 'Rock', 'Pop', 'Folk', 'Hip-Hop', 'Punk', 'Noise', 'Soundtrack'])]

tracks.shape, tracks_top.shape

tracks_top.describe()

sns.displot(tracks_top.query("duration < 300"),x='duration',hue="genre_title")

sns.displot(tracks_top.query("duration < 300"),x='duration',col="genre_title",col_wrap=5)

sns.displot(x="duration",data=tracks_top.query("duration < 300"),kde=True,hue='genre_title')

sns.displot(tracks_top.query("listens<2000"),x='listens',hue="genre_title")

sns.displot(tracks_top.query("listens<2000"),x='listens',col="genre_title",col_wrap=5)

sns.displot(tracks_top.query("listens<2000"),x='listens',hue="genre_title",kde=True)

sns.catplot('listens','genre_title',data=tracks_top,kind='bar')

sns.catplot('listens','genre_title',data=tracks_top)

sns.catplot('listens','genre_title',data=tracks_top,jitter=False)

sns.catplot('interest','genre_title',data=tracks_top)

sns.catplot('interest','genre_title',data=tracks_top,kind='point')

sns.catplot('listens','genre_title',data=tracks_top,kind='point')

genres = pd.read_csv("drive/My Drive/DataSets/fma/genres.csv")

genres.head().T

genres['NumOfTracks']=genres['#tracks']
genres.drop('#tracks',axis=1,inplace=True)
genres.head()

sns.catplot('NumOfTracks','title',data=genres.query("NumOfTracks > 2000"),kind='bar')

sns.catplot('NumOfTracks','title',data=genres.query("NumOfTracks > 1000 and NumOfTracks < 2000"),kind='bar')

sns.catplot('NumOfTracks','title',data=genres.query("NumOfTracks > 10000"),kind='bar')

sns.catplot('NumOfTracks','title',data=genres.query("NumOfTracks > 2000"),kind='point')

"""Echonest/Spotify data: 8 Audio features"""

echonestData = pd.read_csv('drive/My Drive/DataSets/fma/echonest.csv',index_col=0, header=[0, 1,2])

echonestData.head(2)

audioFeatures = echonestData['echonest']['audio_features']
audioFeatures.head(2)

tracks_top.head(2)

audioFeaturesSetA=audioFeatures.merge(tracks_top,left_index=True,right_index=True,how='inner')
print(audioFeaturesSetA.shape)

audioFeaturesSetA.head(5)

audioFeaturesSetA.genre_title.unique()

audioFeaturesSetA.genre_title.nunique()

labels=list(audioFeatures.columns)
labels

for label in labels:
  plt.figure()
  ax=sns.kdeplot(x=label,data=audioFeaturesSetA,hue="genre_title")
  ax=sns.rugplot(x=label,data=audioFeaturesSetA,hue="genre_title")

for label in labels:
  plt.figure()
  ax=sns.histplot(x=label,data=audioFeaturesSetA,hue="genre_title", element="poly")

for label in labels:
  plt.figure()
  ax=sns.histplot(x=label,data=audioFeaturesSetA,hue="genre_title", element="step")

sns.histplot(audioFeaturesSetA,x='tempo',y='energy')

sns.histplot(audioFeaturesSetA,x='instrumentalness',y='danceability')

sns.histplot(audioFeaturesSetA,x='energy',y='danceability')

sns.histplot(audioFeaturesSetA,x='acousticness',y='liveness')

sns.histplot(audioFeaturesSetA,x='valence',y='danceability')

sns.histplot(audioFeaturesSetA,x='valence',y='tempo')

audioFeatures.mean(), audioFeatures.median()

audioFeatures.describe()

num_vars=len(labels)
angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
angles += angles[:1]

"""Radial Charts comparing different genres and corresponding 8 audio features:"""

def plotTopGenreFeatures(genreTitle,colour):
  features = [np.median(audioFeaturesSetA['acousticness'][audioFeaturesSetA.genre_title == genreTitle]), 
              np.median(audioFeaturesSetA['danceability'][audioFeaturesSetA.genre_title == genreTitle]),
              np.median(audioFeaturesSetA['energy'][audioFeaturesSetA.genre_title == genreTitle]),
              np.mean(audioFeaturesSetA['instrumentalness'][audioFeaturesSetA.genre_title == genreTitle]),
              np.median(audioFeaturesSetA['liveness'][audioFeaturesSetA.genre_title == genreTitle]),
              np.median(audioFeaturesSetA['speechiness'][audioFeaturesSetA.genre_title == genreTitle]),
              np.median(audioFeaturesSetA['tempo'][audioFeaturesSetA.genre_title == genreTitle]),
              np.median(audioFeaturesSetA['valence'][audioFeaturesSetA.genre_title == genreTitle])]
  features[-2] = features[-2]/251
  features[-3] = features[-3] * 4
  features += features[:1]
  ax.plot(angles, features, color=colour, linewidth = 1, label = genreTitle)
  ax.fill(angles, features, color=colour, alpha = 0.25)

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

plotTopGenreFeatures('Hip-Hop','green')
plotTopGenreFeatures('Pop','blue')
plotTopGenreFeatures('Punk','red')
plotTopGenreFeatures('Rock','yellow')

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles), labels)

for label, angle in zip(ax.get_xticklabels(), angles):
  if angle in (0, np.pi):
    label.set_horizontalalignment('center')
  elif 0 < angle < np.pi:
    label.set_horizontalalignment('left')
  else:
    label.set_horizontalalignment('right')

ax.set_ylim(0, 1)
ax.set_rlabel_position(180 / num_vars)
ax.set_title('Genres and features')
ax.legend(loc='lower center')

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

plotTopGenreFeatures('Folk','green')
plotTopGenreFeatures('Electronic','blue')
plotTopGenreFeatures('Soundtrack','red')

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles), labels)

for label, angle in zip(ax.get_xticklabels(), angles):
  if angle in (0, np.pi):
    label.set_horizontalalignment('center')
  elif 0 < angle < np.pi:
    label.set_horizontalalignment('left')
  else:
    label.set_horizontalalignment('right')

ax.set_ylim(0, 1)
ax.set_rlabel_position(180 / num_vars)
ax.set_title('Genres and features')
ax.legend(loc='lower center')

audioFeatures = audioFeatures.merge(tracks, left_index=True, right_index=True, how='inner')
audioFeatures.shape

audioFeatures.head(2)

audioFeatures.drop(['genres','genres_all','favorites','duration','interest','listens'],axis=1,inplace=True)

audioFeatures.genre_title.unique()

genres[genres.genre_id==12]

genres[genres.parent==12][genres.title.isin(['Hip-Hop', 'Pop', 'Folk', 'Jazz', 'Post-Rock', 'Punk',
       'Electronic', 'Rock', 'Metal', 'Post-Punk', 'Blues',
       'International', 'Psych-Rock', 'Indie-Rock', 'Psych-Folk',
       'Classical', 'Old-Time / Historic', 'Trip-Hop', 'Compilation',
       'Soundtrack', 'Chiptune', 'Sound Art', 'Kid-Friendly'])]

def plotGenreFeatures(genreTitle,colour):
  features = [np.median(audioFeatures['acousticness'][audioFeatures.genre_title == genreTitle]), 
              np.median(audioFeatures['danceability'][audioFeatures.genre_title == genreTitle]),
              np.median(audioFeatures['energy'][audioFeatures.genre_title == genreTitle]),
              np.mean(audioFeatures['instrumentalness'][audioFeatures.genre_title == genreTitle]),
              np.median(audioFeatures['liveness'][audioFeatures.genre_title == genreTitle]),
              np.median(audioFeatures['speechiness'][audioFeatures.genre_title == genreTitle]),
              np.median(audioFeatures['tempo'][audioFeatures.genre_title == genreTitle]),
              np.median(audioFeatures['valence'][audioFeatures.genre_title == genreTitle])]
  features[-2] = features[-2]/251
  features[-3] = features[-3] * 4
  features += features[:1]
  ax.plot(angles, features, color=colour, linewidth = 1, label = genreTitle)
  ax.fill(angles, features, color=colour, alpha = 0.1)

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

plotGenreFeatures('Punk','green')
plotGenreFeatures('Post-Rock','blue')
plotGenreFeatures('Metal','red')
plotGenreFeatures('Psych-Rock','yellow')
plotGenreFeatures('Indie-Rock','cyan')
plotGenreFeatures('Rock','black')

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles), labels)

for label, angle in zip(ax.get_xticklabels(), angles):
  if angle in (0, np.pi):
    label.set_horizontalalignment('center')
  elif 0 < angle < np.pi:
    label.set_horizontalalignment('left')
  else:
    label.set_horizontalalignment('right')

ax.set_ylim(0, 1)
ax.set_rlabel_position(180 / num_vars)
ax.set_title('Genres and features (Parent Genre -Rock)')
ax.legend(loc='lower center')

genres[genres.parent==25][genres.title.isin(['Hip-Hop', 'Pop', 'Folk', 'Jazz', 'Post-Rock', 'Punk',
       'Electronic', 'Rock', 'Metal', 'Post-Punk', 'Blues',
       'International', 'Psych-Rock', 'Indie-Rock', 'Psych-Folk',
       'Classical', 'Old-Time / Historic', 'Trip-Hop', 'Compilation',
       'Soundtrack', 'Chiptune', 'Sound Art', 'Kid-Friendly'])]

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

plotGenreFeatures('Post-Punk','blue')
plotGenreFeatures('Punk','green')
plotGenreFeatures('Rock','red')

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles), labels)

for label, angle in zip(ax.get_xticklabels(), angles):
  if angle in (0, np.pi):
    label.set_horizontalalignment('center')
  elif 0 < angle < np.pi:
    label.set_horizontalalignment('left')
  else:
    label.set_horizontalalignment('right')

ax.set_ylim(0, 1)
ax.set_rlabel_position(180 / num_vars)
ax.set_title('Genres and features (Rock is parent of Punk. Punk is parent of Post-Punk)')
ax.legend(loc='lower center')

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

plotGenreFeatures('Folk','green')
plotGenreFeatures('Psych-Folk','blue')
plotGenreFeatures('Old-Time / Historic','red')
plotGenreFeatures('Classical','yellow')
plotGenreFeatures('Kid-Friendly','cyan')

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles), labels)

for label, angle in zip(ax.get_xticklabels(), angles):
  if angle in (0, np.pi):
    label.set_horizontalalignment('center')
  elif 0 < angle < np.pi:
    label.set_horizontalalignment('left')
  else:
    label.set_horizontalalignment('right')

ax.set_ylim(0, 1)
ax.set_rlabel_position(180 / num_vars)
ax.set_title('Genres and features (Folk Vs. Classical Vs. KidFriendly)')
ax.legend(loc='lower center')

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

plotGenreFeatures('Electronic','green')
plotGenreFeatures('International','blue')
plotGenreFeatures('Old-Time / Historic','red')
plotGenreFeatures('Folk','yellow')
plotGenreFeatures('Kid-Friendly','cyan')
plotGenreFeatures('Blues','magenta')

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles), labels)

for label, angle in zip(ax.get_xticklabels(), angles):
  if angle in (0, np.pi):
    label.set_horizontalalignment('center')
  elif 0 < angle < np.pi:
    label.set_horizontalalignment('left')
  else:
    label.set_horizontalalignment('right')

ax.set_ylim(0, 1)
ax.set_rlabel_position(180 / num_vars)
ax.set_title('Genres and features (Folk Vs. Classical Vs. KidFriendly)')
ax.legend(loc='lower center')

"""Audio features extracted using librosa library:"""

librosaFeatures = pd.read_csv('drive/My Drive/DataSets/fma/features.csv',index_col=0, header=[0, 1,2])

librosaFeatures.head(2).T

print(list(librosaFeatures.columns))

librosaMainFeatures=pd.concat([librosaFeatures['chroma_cens']['mean']['01'],librosaFeatures['chroma_stft']['mean']['01'],librosaFeatures['spectral_contrast']['mean']['01'],librosaFeatures['spectral_centroid']['mean']['01'], librosaFeatures['mfcc']['mean']['01'], librosaFeatures['mfcc']['mean']['02'], librosaFeatures['mfcc']['mean']['03'], librosaFeatures['mfcc']['mean']['04'], librosaFeatures['mfcc']['mean']['05'], librosaFeatures['mfcc']['mean']['06'], librosaFeatures['mfcc']['mean']['07'], librosaFeatures['mfcc']['mean']['08'], librosaFeatures['mfcc']['mean']['09'], librosaFeatures['mfcc']['mean']['10'], librosaFeatures['mfcc']['mean']['11'], librosaFeatures['mfcc']['mean']['12']],axis=1, )

librosaMainFeatures.head()

librosaMainFeatures.columns = ['chroma_cens','chroma_stft','spectral_contrast','spectral_centroid','mfcc1','mfcc2','mfcc3','mfcc4','mfcc5','mfcc6','mfcc7','mfcc8','mfcc9','mfcc10','mfcc11','mfcc12']

librosaMainFeatures.head().T

tracks.head()

librosaMainFeatures = librosaMainFeatures.merge(tracks['genre_title'], left_index=True, right_index=True, how='inner')
librosaMainFeatures.shape

librosaMainFeatures.head()

librosaSetA = librosaMainFeatures[librosaMainFeatures.genre_title.isin(['Hip-Hop', 'Folk'])]

librosaSetA.shape

librosaSetA.groupby('genre_title').size()

featuresList = ['chroma_cens','chroma_stft','spectral_contrast','spectral_centroid','mfcc1','mfcc2','mfcc3','mfcc4','mfcc5','mfcc6','mfcc7','mfcc8','mfcc9','mfcc10','mfcc11','mfcc12']
total_cols=4
total_rows=4
fig,axes=plt.subplots(nrows=4,ncols=4,figsize=(5*total_cols, 5*total_rows), constrained_layout=True)
for i,var in enumerate(featuresList):
  row=i // total_cols
  col=i % total_cols
  sns.histplot(x=var,data=librosaSetA,hue="genre_title",kde=True,ax=axes[row][col])

featuresList = ['chroma_cens','chroma_stft','spectral_contrast','spectral_centroid','mfcc1','mfcc2','mfcc3','mfcc4','mfcc5','mfcc6','mfcc7','mfcc8','mfcc9','mfcc10','mfcc11','mfcc12']
total_cols=4
total_rows=4
fig,axes=plt.subplots(nrows=4,ncols=4,figsize=(5*total_cols, 5*total_rows), constrained_layout=True)
for i,var in enumerate(featuresList):
  row=i // total_cols
  col=i % total_cols
  sns.ecdfplot(data=librosaSetA,x=var,hue="genre_title",ax=axes[row][col])
  sns.rugplot(data=librosaSetA,x=var,hue="genre_title",ax=axes[row][col])

x=librosaSetA.drop(['genre_title'],axis=1)
y=librosaSetA.genre_title

"""Classification of genres(**Hip-Hop and Folk**) based on few librosa features:"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(x_train, y_train)
y_pred = logreg.predict(x_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(x_test, y_test)))

from sklearn.metrics import f1_score
print('F1Score of Logistic Regression: ', f1_score(y_test, y_pred, average="macro"))

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=300, bootstrap = True, max_features = 'sqrt')
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print('Accuracy of Random Forest on test set: {:.2f}'.format(model.score(x_test, y_test)))
print('F1Score of Random Forest classifier ',f1_score(y_test, y_pred, average="macro"))

from sklearn.ensemble import GradientBoostingClassifier
gradBoost=GradientBoostingClassifier(loss="exponential",learning_rate=0.01, n_estimators=50, max_depth=10,random_state=42)
gradBoost.fit(x_train,y_train)
ypredGradBoost=gradBoost.predict(x_test)
print('Accuracy of Gradient Boosting Classifier on test set: {:.2f}'.format(gradBoost.score(x_test, y_test)))
print('F1Score of Gradient Boosting classifier ',f1_score(y_test, y_pred, average="macro"))

from xgboost import XGBClassifier
from sklearn.model_selection import cross_val_score
xgBoost= XGBClassifier(learning_rate=0.01, n_estimators=25, max_depth=15,gamma=0.6, subsample=0.52,colsample_bytree=0.6,seed=27, 
                    reg_lambda=2, booster='dart', colsample_bylevel=0.6, colsample_bynode=0.5)
scores_xgBoost=cross_val_score(xgBoost,x_train,y_train,cv=10,scoring="f1_micro")
print(scores_xgBoost)
print(scores_xgBoost.mean())

importance=list(model.feature_importances_)
allfeatures=librosaSetA.drop('genre_title',axis=1)
features=list(allfeatures.columns)
fig = plt.figure(figsize = (20, 5)) 
plt.barh(features, importance, color ='grey') 
plt.title('Random Forest classifier-Feature importances')
plt.xlabel("Features importance") 
plt.ylabel("Audio features") 
plt.show()

zipped_lists=zip(importance,features)
zipped_lists=list(sorted(zipped_lists))
importanceSorted,featuresSorted = zip(*zipped_lists)
fig = plt.figure(figsize = (20, 5)) 
plt.barh(list(featuresSorted), list(importanceSorted), color ='red') 
plt.title('Random Forest classifier-Feature importances (Sorted)')
plt.ylabel("Feature importance") 
plt.xlabel("Audio Features") 
plt.show()

